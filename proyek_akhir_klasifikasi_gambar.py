# -*- coding: utf-8 -*-
"""Proyek Akhir : Klasifikasi Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Pjtxa6xoAHwbS0Ue_saFbXPTqtFDqqm

#Profile

*   Name : Dandi Septiandi
*   Email : dandi.septiandi2001@gmail.com
*   Address : Pekanbaru, Riau

#Import Library
"""

# Import Library
import pandas as pd
import numpy as np
import zipfile
import os

import tensorflow as tf
import keras_preprocessing
import matplotlib.pyplot as plt
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

"""#Preparation Dataset

"""

!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

# do extraction to file zip
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

# set base directory
base_dir = '/tmp/rockpaperscissors/rps-cv-images'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

# check directory rockpaperscissors
os.listdir('/tmp/rockpaperscissors')

# check rps-cv-image
os.listdir('/tmp/rockpaperscissors/rps-cv-images')

"""#Splitting the images and labels"""

scissors_img = os.path.join('/tmp/rockpaperscissors/scissors')
scissors_dir = os.listdir(scissors_img)
print("Total image for scissors: ", len(scissors_dir))

paper_img = os.path.join('/tmp/rockpaperscissors/paper')
paper_dir = os.listdir(paper_img)
print("Total image for paper: ", len(paper_dir))

rock_img = os.path.join('/tmp/rockpaperscissors/rock')
rock_dir = os.listdir(rock_img)
print("Total image for rock: ", len(rock_dir))

"""#Data Pre-processing with Image Augmentation"""

training_datagen = ImageDataGenerator(rescale=1./255,
                                      validation_split=0.4,
                                      rotation_range=40,
                                      zoom_range=0.2,
                                      horizontal_flip=True,
                                      shear_range = 0.2,
                                      fill_mode = 'nearest')

validation_datagen = ImageDataGenerator(rescale = 1.0/255,
                                        validation_split=0.4)

"""#Prepare the Data for the Model"""

training_generator = training_datagen.flow_from_directory(
        base_dir,                # direktori data latih
        subset='training',
        target_size=(150, 150),   # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        class_mode='categorical') # use ‘categorical’ because we have 3 classes of image

validation_generator = validation_datagen.flow_from_directory(
        base_dir,           # direktori data validasi
        subset='validation',
        target_size=(150, 150),   # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        class_mode='categorical') # use ‘categorical’ because we have 3 classes of image

"""#Compile and Fit Model"""

model = tf.keras.models.Sequential([
    #1 convo
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    #2 convo
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    #3 convo
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    #4 convo
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    # flatten
    tf.keras.layers.Flatten(),
    # hidden layers
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(512, activation = 'relu'),
    tf.keras.layers.Dropout(0.5),
    # output
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

# Compile the Model: Determine the Loss Function and Optimizer

model.compile(loss='categorical_crossentropy',
              optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.0001),
              metrics=['accuracy'])

"""#Callbacks"""

# Class callback to stop when accuracy 98%
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')> 0.98):
      print("Tingkat akurasi mencapai 98%, Training Model berhenti")
      self.model.stop_training = True

callbacks = myCallback()

"""#Train the Model"""

#Train data

history = model.fit(
      training_generator,
      steps_per_epoch=25,        # berapa batch yang akan dieksekusi pada setiap epoch
      epochs=30,
      validation_data=validation_generator,         # menampilkan akurasi pengujian data validasi
      validation_steps=5,      # berapa batch yang akan dieksekusi pada setiap epoch
      verbose=2,
      callbacks=[callbacks])

"""#Plotting Accuracy"""

# Mengambil history dari loss dan accuracy
loss = history.history['loss']
val_loss = history.history['val_loss']
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

# Show graph loss and accuracy
plt.figure(figsize=(15, 5))

plt.subplot(1, 2, 1)
plt.title('Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.plot(loss, label='Training set')
plt.plot(val_loss, label='Validation set', linestyle='--')
plt.legend()
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.subplot(1, 2, 2)
plt.title('Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.plot(acc, label='Training set')
plt.plot(val_acc, label='Validation set', linestyle='--')
plt.legend()
plt.grid(linestyle='--', linewidth=1, alpha=0.5)

plt.show()

"""#Image Upload"""

# Image Upload
import numpy as np
from google.colab import files
from keras_preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)

  print(fn)
  if classes[0, 0]==1:
    print('rock')
  elif classes[0, 1]==1:
    print('paper')
  elif classes[0, 2]==1:
    print('scissors')
  else:
    print('Eror')